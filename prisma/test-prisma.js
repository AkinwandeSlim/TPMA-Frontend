const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function main() {
  try {
    const admins = await prisma.admin.findMany();
    console.log("Admins:", admins);

    const levels = await prisma.level.findMany();
    console.log("Levels:", levels);

    const courses = await prisma.course.findMany();
    console.log("Courses:", courses);

    const supervisors = await prisma.supervisor.findMany();
    console.log("Supervisors:", supervisors);

    const teacherTrainees = await prisma.teacherTrainee.findMany({ include: { level: true, course: true } });
    console.log("Teacher Trainees:", teacherTrainees);

    const lessonPlans = await prisma.lessonPlan.findMany({ include: { teacherTrainee: true, course: true, supervisor: true } });
    console.log("Lesson Plans:", lessonPlans);

    const evaluationForms = await prisma.evaluationForm.findMany();
    console.log("Evaluation Forms:", evaluationForms);

    const evaluations = await prisma.evaluation.findMany({ include: { teacherTrainee: true, supervisor: true, form: true } });
    console.log("Evaluations:", evaluations);

    const reports = await prisma.report.findMany({ include: { teacherTrainee: true } });
    console.log("Reports:", reports);

    const notifications = await prisma.notification.findMany({
      include: {
        supervisor: true,
        teacherTrainee: true, // Ensure this matches the schema
      },
    });
    console.log("Notifications:", notifications);

    const events = await prisma.event.findMany();
    console.log("Events:", events);

    const announcements = await prisma.announcement.findMany();
    console.log("Announcements:", announcements);
  } catch (error) {
    console.error("Error querying the database:", error);
  }
}

main()
  .then(() => prisma.$disconnect())
  .catch((e) => {
    console.error("Error in main:", e);
    prisma.$disconnect();
  });
















//   generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// model Admin {
//   id       String @id
//   username String @unique
// }

// model TeacherTrainee {
//   id            String         @id
//   regNo         String         @unique // Registration Number for login
//   name          String
//   surname       String
//   email         String?        @unique
//   phone         String?        @unique
//   address       String
//   img           String?
//   bloodType     String
//   sex           UserSex
//   createdAt     DateTime       @default(now())
//   birthday      DateTime
//   placeOfTP     String? // Place of Teaching Practice
//   weeksRequired Int? // Number of weeks required for TP
//   levelId       Int
//   level         Level          @relation(fields: [levelId], references: [id])
//   courseId      Int
//   course        Course         @relation(fields: [courseId], references: [id])
//   supervisors   Supervisor[]   @relation("SupervisorTeacherTrainee")
//   reports       Report[] // Reports submitted by the Teacher-Trainee
//   evaluations   Evaluation[] // Evaluations received from Supervisors
//   lessonPlans   LessonPlan[] // Lesson plans generated by the Teacher-Trainee
//   notifications Notification[] @relation("TeacherTraineeNotifications")
// }

// model Supervisor {
//   id                 String           @id
//   username           String           @unique
//   staffId            String           @unique // Staff ID for Supervisors
//   name               String
//   surname            String
//   email              String?          @unique
//   phone              String?          @unique
//   address            String
//   img                String?
//   bloodType          String
//   sex                UserSex
//   createdAt          DateTime         @default(now())
//   birthday           DateTime
//   placeOfSupervision String? // Place of Supervision
//   teacherTrainees    TeacherTrainee[] @relation("SupervisorTeacherTrainee")
//   evaluations        Evaluation[] // Evaluations submitted by the Supervisor
//   notifications      Notification[] // Notifications sent by the Supervisor
//   lessonPlans        LessonPlan[] // Lesson plans reviewed by the Supervisor
// }

// model Level {
//   id              Int              @id @default(autoincrement())
//   level           Int              @unique // e.g., 1, 2, 3, 4, 5 for Level 1 to Level 5
//   teacherTrainees TeacherTrainee[]
// }

// model Course {
//   id              Int              @id @default(autoincrement())
//   name            String           @unique // e.g., "B.Ed. English", "B.Ed. Mathematics"
//   teacherTrainees TeacherTrainee[]
//   lessonPlans     LessonPlan[] // Lesson plans associated with this course
// }

// model LessonPlan {
//   id               Int            @id @default(autoincrement())
//   title            String // Title of the lesson plan (e.g., "Introduction to Algebra")
//   content          String // The AI-generated lesson plan content (stored as text)
//   duration         Int? // Duration in minutes (e.g., 60 minutes)
//   createdAt        DateTime       @default(now())
//   teacherTraineeId String
//   teacherTrainee   TeacherTrainee @relation(fields: [teacherTraineeId], references: [id])
//   courseId         Int
//   course           Course         @relation(fields: [courseId], references: [id])
//   supervisorId     String? // Optional: Supervisor who reviews the lesson plan
//   supervisor       Supervisor?    @relation(fields: [supervisorId], references: [id])
//   feedback         String? // Optional: Feedback from the Supervisor
// }

// model EvaluationForm {
//   id          Int          @id @default(autoincrement())
//   title       String
//   fileUrl     String // URL to the evaluation form file (e.g., PDF)
//   uploadedBy  String // Admin ID
//   uploadedAt  DateTime     @default(now())
//   evaluations Evaluation[] // Evaluations using this form
// }

// model Evaluation {
//   id               Int            @id @default(autoincrement())
//   teacherTraineeId String
//   teacherTrainee   TeacherTrainee @relation(fields: [teacherTraineeId], references: [id])
//   supervisorId     String
//   supervisor       Supervisor     @relation(fields: [supervisorId], references: [id])
//   formId           Int
//   form             EvaluationForm @relation(fields: [formId], references: [id])
//   score            Int? // Score given by the Supervisor
//   feedback         String? // Feedback text
//   submittedAt      DateTime       @default(now())
// }

// model Report {
//   id               Int            @id @default(autoincrement())
//   title            String
//   fileUrl          String // URL to the report file (e.g., PDF)
//   teacherTraineeId String
//   teacherTrainee   TeacherTrainee @relation(fields: [teacherTraineeId], references: [id])
//   submittedAt      DateTime       @default(now())
// }

// model Notification {
//   id               Int             @id @default(autoincrement())
//   title            String
//   message          String
//   supervisorId     String
//   supervisor       Supervisor      @relation(fields: [supervisorId], references: [id])
//   teacherTraineeId String? // Optional: For individual notifications
//   teacherTrainee   TeacherTrainee? @relation("TeacherTraineeNotifications", fields: [teacherTraineeId], references: [id])
//   createdAt        DateTime        @default(now())
// }

// model Event {
//   id          Int      @id @default(autoincrement())
//   title       String
//   description String
//   startTime   DateTime
//   endTime     DateTime
// }

// model Announcement {
//   id          Int      @id @default(autoincrement())
//   title       String
//   description String
//   date        DateTime
// }

// enum UserSex {
//   MALE
//   FEMALE
// }
